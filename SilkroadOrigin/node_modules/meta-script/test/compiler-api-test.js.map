{"version":3,"sources":["/SSD/massi/HF3/metascript/test/compiler-api-test.mjs"],"names":["require","install","should","Meta","mjs","describe","it","compiler","compilerFromString","ast","produceAst","_$4","type","equal","not","exist","errors","map","e","message","eql","customMjs","options","fullMacroErrors","true","emitIdentifierStatements","_$2","allowUndeclaredIdentifiers","javascript","generate","code","value","eval"],"mappings":"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","sourcesContent":["require('source-map-support').install()\n\n#metaimport './lib/testing'\n\nvar\n  should = require 'should'\n  Meta = require '..'\n  mjs = Meta()\n\ndescribe '#compilerFromString'\n\n  it 'should produce an ast from valid code'\n    var compiler = mjs.compiler-from-string 'var a = 42'\n    var ast = compiler.produce-ast()\n    ast.type.should.equal 'Program'\n\n  it 'should report errors for invalid code'\n    var compiler = mjs.compiler-from-string 'ff'\n    var ast = compiler.produce-ast()\n    should.not.exist ast\n    compiler.errors.map(e -> e.message).should.eql\n      ['Undeclared identifier \"ff\"']\n\n  it 'should inherit options set at the meta level'\n    var custom-mjs = Meta()\n    custom-mjs.options.full-macro-errors = true\n    custom-mjs.options.emit-identifier-statements = true\n    var compiler = custom-mjs.compiler-from-string ''\n    compiler.options.full-macro-errors.should.equal true\n    compiler.options.emit-identifier-statements.should.equal true\n\n  describe 'options.allowUndeclaredIdentifiers'\n\n    it 'causes the compiler to not emit errors for undeclared identifiers'\n      var custom-mjs = Meta()\n      custom-mjs.options.allow-undeclared-identifiers = true\n      var compiler = custom-mjs.compiler-from-string 'value = 42'\n      var ast = compiler.produce-ast()\n      var javascript = compiler.generate(ast).code\n\n      var value = 0\n      #external eval javascript\n      value.should.equal 42\n\n"]}