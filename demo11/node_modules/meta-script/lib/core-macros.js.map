{"version":3,"sources":["/SSD/massi/HF3/metascript/lib/core-macros.mjs"],"names":["module","exports","ast","composeMacroArguments","nameArg","argsTuple","nameValue","getSimpleValue","null","error","isTuple","ok","true","name","newValue","arity","precedence","options","newObjectLiteral","index","count","arg","at","simpleValue","false","isProperty","skip","property","copy","value","propertyName","simplePropertyValue","isFunctionDefinition","func","macroBody","pop","asTuple","macroArgs","push","newTag","argIndex","macroArg","isTag","argDeclaration","fromJsonString","replaceTag","getTag","handleAsTagDeclaration","unshift","_$22","_$4","defineSymbol","createMacro","code","innerDo","newDo","newMeta","tail","args","result","_$7","definition","sym","keyScope","get","undefined","tagReplacements","unquoteIndex","forEachRecursive","child","id","replacement","replacementName","replacementNameVal","replacementNameTag","tagReplacement","replaceWith","_$8","resolveVirtual","_$6","body","statements","codeTag0","map","_$9","_$10","moduleNames","moduleStrings","moduleName","moduleString","_$13","_$11","condition","_$12","following","start","current","others","getLeftmost","root","isCall","isMember","_$14","other","shift","otherLeftmost","parent","_$18","otherParent","codeTag1","_$21","callee","member","_$15","isArray","codeTag2","codeTag3","_$20","isPlaceholder","codeTag4","codeTag5","newTuple","processNext","n","currentId","currentArgName","node","handleAsFunctionArgument","_$19","rhs","lhs","traverser","__$arg$1","forEach","_$17","expr","isValue","set","getValue","_$16","val","tag","_$23","exprs","previousShortcut","previousSymbol","nextSymbol","specialSymbols","whereDefinitions","Object","create","exprsData","newData","_$26","replacePlaceholder","phName","ph","_$28","hasWhereDefinitions","handleWhereDefinition","indexOf","handleWhereClause","clauses","whereClauseDeclaration","substring","handleAsVirtualTag","whereClauseVariable","analyzeExpr","data","phValue","previous","next","val0","_$33","_$31","whereDefinition","firstOccurrences","length","_$29","nextReference","last","_$32","leftmost","leftmostParent","_$34","_$36","_$1"],"mappings":"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","sourcesContent":["#external module\n\nmodule.exports = (ast) -> do (\n\n#meta\n  var composeMacroArguments = (nameArg, argsTuple) ->\n    var nameValue = nameArg.getSimpleValue()\n    if (nameValue == null)\n      argsTuple.error 'Invalid name argument'\n      return null\n    if (!(argsTuple.isTuple()))\n      argsTuple.error 'Expected tuple argument'\n      return null\n    var\n      ok = true\n      name = nameArg.newValue nameValue\n      arity = ast.newValue 'unary'\n      precedence = ast.newValue 'LOW'\n      options = ast.newObjectLiteral()\n    loop (var index = 0)\n      if (index < argsTuple.count)\n        var arg = argsTuple.at index\n        var simpleValue = arg.getSimpleValue()\n        if (simpleValue != null)\n          if (index == 0)\n            arity = arg.newValue simpleValue\n          else if (index == 1)\n            precedence = arg.newValue simpleValue\n          else\n            arg.error('Invalid simple property')\n            ok = false\n        else if (arg.isProperty())\n          var skip = false\n          var property = arg.copy()\n          var value = property.at 1\n          var propertyName = (property.at 0).getSimpleValue()\n          var simplePropertyValue = value.getSimpleValue()\n          if (propertyName == 'arity' && simplePropertyValue != null)\n            arity = arg.newValue simplePropertyValue\n            skip = true\n          else if (propertyName == 'precedence' && simplePropertyValue != null)\n            precedence = arg.newValue simplePropertyValue\n            skip = true\n          else if (value.isFunctionDefinition())\n            var func = value.copy()\n            var macroBody = func.pop().asTuple()\n            var macroArgs = func.pop().asTuple()\n            func .push(arg.newTag 'ast')\n            func.push macroBody\n            loop (var argIndex = 0)\n              if (argIndex < macroArgs.count)\n                var macroArg = macroArgs.at argIndex\n                if (macroArg.isTag())\n                  var argDeclaration = #quote var __argName = ast.at __argIndex\n                  argDeclaration.replaceTag('__argName', (macroArg.newTag(macroArg.getTag())).handleAsTagDeclaration())\n                  argDeclaration.replaceTag('__argIndex', macroArg.newValue(argIndex))\n                  macroBody.unshift argDeclaration\n                else\n                  macroArg.error 'Argument name expected'\n                  ok = false\n                next! argIndex + 1\n            if ok\n              property.pop()\n              property.push func\n          if (!skip)\n            options.push property\n        else\n          arg.error('Invalid property')\n          ok = false\n        next! index + 1\n    if ok [name, arity, precedence, options] else null\n\n  ast.defineSymbol\n    ast.createMacro\n      '#exec-meta'\n      'unary'\n      'LOW'\n      {\n        postCombine: (ast) ->\n          var code = (ast.at 0).copy()\n          var innerDo = ast.newDo([code.copy(), ast.newTag 'null'])\n          ast.newMeta innerDo\n      }\n  ast.defineSymbol\n    ast.createMacro\n      '#keep-meta'\n      'unary'\n      'LOW'\n      {\n        postCombine: (ast) ->\n          var code = (ast.at 0).copy()\n          var tail = #quote (ast.at(0).at(0).copy())\n          var innerDo = ast.newDo([code.copy(), tail])\n          ast.newMeta innerDo\n      }\n\n  ast.defineSymbol\n    ast.createMacro\n      '#macro'\n      'binaryKeyword'\n      'LOW'\n      {\n        expand: (ast) ->\n          if (!ast.count == 2) do\n            ast.error('Expected arguments: name and properties')\n            return null\n          var argsTuple = (ast.at 1).asTuple()\n          var args = composeMacroArguments(ast.at 0, argsTuple)\n          if (args != null) do\n            var result = #quote (ast.createMacro(__arg0, __arg1, __arg2, __arg3))\n            result.replaceTag('__arg0', args[0])\n            result.replaceTag('__arg1', args[1])\n            result.replaceTag('__arg2', args[2])\n            result.replaceTag('__arg3', args[3])\n            result\n          else\n            null\n      }\n  ast.defineSymbol\n    ast.createMacro\n      '#defmacro'\n      'binaryKeyword'\n      'LOW'\n      {\n        postCombine: (ast) ->\n          if (!ast.count == 2) do\n            ast.error('Expected arguments: name and properties')\n            return null\n          var argsTuple = (ast.at 1).asTuple()\n          var args = composeMacroArguments(ast.at 0, argsTuple)\n          if (args != null) do\n            var definition = #quote (ast.defineSymbol(ast.createMacro(__arg0, __arg1, __arg2, __arg3)), null)\n            definition.replaceTag('__arg0', args[0])\n            definition.replaceTag('__arg1', args[1])\n            definition.replaceTag('__arg2', args[2])\n            definition.replaceTag('__arg3', args[3])\n            ast.newMeta(ast.newDo(definition))\n          else\n            null\n      }\n  ast.defineSymbol\n    ast.createMacro\n      '#keepmacro'\n      'binaryKeyword'\n      'LOW'\n      {\n        postCombine: (ast) ->\n          if (!ast.count == 2) do\n            ast.error('Expected arguments: name and properties')\n            return null\n          var argsTuple = (ast.at 1).asTuple()\n          var args = composeMacroArguments(ast.at 0, argsTuple)\n          if (args != null) do\n            var definition = #quote (ast.defineSymbol(ast.createMacro(__arg0, __arg1, __arg2, __arg3)), null)\n            definition.replaceTag('__arg0', args[0])\n            definition.replaceTag('__arg1', args[1])\n            definition.replaceTag('__arg2', args[2])\n            definition.replaceTag('__arg3', args[3])\n            var result = ast.newMeta(ast.newDo(definition))\n            result.sym = ast.keyScope.get '#keep-meta'\n            result\n          else\n            null\n      }\n\n  ; Trick to compile the code twice: in this compilation context and for the generated JS.\n  ; It removes this last statement from the code (so that it does not appear in the generated\n  ; file) but makes so that the top level #meta keeps the code (by returning ast.at 0).\n  do ((ast.at 0).pop(), ast.at 0)\n\n#keepmacro '~`'\n  unary\n  expand: () -> ()\n\n#keepmacro '`'\n  unary\n  LOW\n  doNotExpandChildren: true\n  expand: (code) ->\n    var result = #quote do\n      var \\codeTag = #quote code\n      tagReplacements\n      \\codeTag\n    var tagReplacements = []\n    var unquoteIndex = 1\n    code.forEachRecursive\n      (child) -> do\n        if (child.id == '~`')\n          var\n            replacement = child.at 0\n            replacementName = 'unquote' + unquoteIndex;\n            replacementNameVal = child.newValue replacementName\n            replacementNameTag = child.newTag replacementName\n            tagReplacement = #quote ((\\codeTag).replaceTag(quotedTagName, replacement))\n          child.replaceWith replacementNameTag\n          tagReplacement.replaceTag('quotedTagName', replacementNameVal)\n          tagReplacement.replaceTag('replacement', replacement)\n          tagReplacements.push tagReplacement\n          unquoteIndex += 1\n        ()\n    result.replaceTag('code', code)\n    result.replaceTag('tagReplacements', tagReplacements)\n    result.resolveVirtual()\n    result\n\n#keepmacro 'do!'\n  unary\n  LOW\n  expand: (body) ->\n    var statements = body.copy().asTuple()\n    var result = `\n      do\n        ~` statements.map(arg -> arg)\n        undefined\n    result\n\n#keepmacro '#metamodule'\n  unary\n  LOW\n  expand: (body) ->\n    `\n      #external module\n      module.exports = (ast) ->\n        do\n          do\n            ~` body\n          null\n\n#keepmacro #metaimport\n  arity: unary\n  precedence: LOW\n  postCombine: moduleNames ->\n    var moduleStrings = moduleNames.asTuple().map\n      moduleName ->\n        var moduleString = moduleName.getSimpleValue()\n        if (typeof moduleString != 'string') do\n          moduleName.error 'Invalid module name'\n          moduleName\n        else\n          moduleName.newValue moduleString\n    moduleNames.newMeta\n      `\n        try\n          var metaRequire = (require 'require-like')(ast.compiler.parser.source)\n          [~`moduleStrings].forEach\n            m -> (metaRequire m) (ast)\n        catch (var e)\n          ast.error('Error importing module: ' + e.toString())\n        null\n\n#keepmacro while\n  arity: binaryKeyword\n  precedence: LOW\n  expand: (condition, body) ->\n    ` loop ()\n      if (~` condition) do\n        do\n          ~` body\n        next! ()\n\n#keepmacro .->\n  arity: binary\n  precedence: MEMBER\n  expand: (start, following) ->\n    var\n      current = start\n      others = following.asTuple()\n      get-leftmost = (root) ->\n        while (root.isCall() || root.isMember())\n          root = root.at 0\n        root\n    while (others.count > 0)\n      var\n        other = others.shift()\n        other-leftmost = get-leftmost other\n      current =\n        if (other-leftmost.parent == null)\n          ` (~`current).(~`other-leftmost)\n        else do\n          var other-parent = other-leftmost.parent\n          other-parent.shift()\n          other-parent.unshift(` (~`current).(~`other-leftmost))\n          other\n    current\n\n#keepmacro <-\n  arity: binary\n  precedence: MEDIUM\n  expand: (callee, args) ->\n    ` (~`callee)(~`args)\n\n#keepmacro @\n  unary\n  HIGH\n  expand: member ->\n    if (member.tag?())\n      `this. ~`member\n    else if (member.array?())\n      if (member.count == 0)\n        `this\n      else if (member.count == 1)\n        `this[~`member]\n      else do\n        member.error 'Member operator accepts only one operand'\n        `undefined\n    else if (member.placeholder?() && member.get-simple-value() == null)\n      `this\n    else\n      `this[~`member]\n\n#keepmacro #->\n  unary\n  LOW\n  expand: (body) ->\n    if (typeof body == 'undefined' || (body.isPlaceholder() && body.getSimpleValue() == null))\n      body = ast.newTag 'undefined'\n    var args = ast.newTuple()\n    var process-next = true\n    loop (var n = 1)\n      if process-next\n        process-next = false\n        var\n          current-id = '#' + n\n          current-arg-name = '__$arg$' + n\n        body.forEachRecursive\n          node -> do!\n            if (node.isPlaceholder() && (node.getSimpleValue() == current-id || (n == 1 && node.getSimpleValue() == '#it')))\n              if (!process-next)\n                process-next = true;\n                args.push((ast.newTag current-arg-name).handleAsFunctionArgument())\n              node.replaceWith(node.newTag current-arg-name)\n        next! n + 1\n    `(~` args) -> (~` body)\n\n\n; Fat arrow, binds `this` to the function's lexical context\n#keepmacro =>\n  arity: binary\n  precedence: FUNCTION\n  left-precedence: 'FUNCTION-LEFT'\n  expand: (lhs, rhs) ->\n    var traverser = #-> do!\n      if (#it.isTag() && #it.getTag() == 'this')\n        #it.replaceWith ` \\captured-this\n      if (! #it.function-definition?())\n        #it.for-each #-> traverser #it\n    traverser rhs\n    var result = ` do\n      var \\captured-this = this\n      (~` lhs) -> (~` rhs)\n    result.resolveVirtual()\n    result\n\n#keepmacro #js\n'''\n  Same as eval but for literal values allows to directly embed it in the\n  generated javascript code.\n\n  Usage: js'bar ? 1 : -1'\n'''\n  unary\n  HIGH\n  expand: (expr) ->\n    var code = ` (#external eval)( ~`(expr) )\n    if (expr.value?())\n      code.set('js', expr.get-value())\n    code\n\n#keepmacro #no-new-scope\n  unary\n  LOW\n  expand: (expr) ->\n    expr.set('no-new-scope', true)\n    expr\n\n#keepmacro ?\n  arity: post\n  precedence: MEMBER\n  expand: (val) ->\n    var result = `do\n      var \\val = ~`val\n      if (typeof \\val != 'undefined')\n        true\n      else\n        false\n    result.resolveVirtual()\n    result\n\n#keepmacro ??\n  arity: binary\n  precedence: LOGICAL-OR\n  expand: (val, other) ->\n    var result = `do\n      var \\val = ~`val\n      if (typeof \\val != 'undefined')\n        \\val\n      else\n        ~` other\n    result.resolveVirtual()\n    result\n\n#keepmacro .?\n  arity: binary\n  precedence: MEMBER\n  expand: (val, tag) ->\n    if (! tag.tag?()) do\n      tag.error 'Member name expected'\n      return undefined\n    var result = `do\n      var \\val = ~`val\n      if (typeof \\val != 'undefined' && \\val != null)\n        \\val . ~`tag\n      else\n        \\val\n    result.resolveVirtual()\n    result\n\n#keepmacro <-?\n  arity: binary\n  precedence: MEDIUM\n  expand: (func, args) ->\n    var result = `do\n      var \\func = ~`func\n      if (typeof \\func != 'undefined' && \\func != null)\n        \\func <- ~`args\n      else\n        undefined\n    result.resolveVirtual()\n    result\n\nnull\n\n#keepmacro |:\n  arity: binary\n  precedence: LOW\n  left-precedence: 'CALL'\n  expand: (start, exprs) ->\n    var\n      previous-shortcut = '#'\n      previous-symbol = '#previous'\n      next-symbol = '#next'\n      special-symbols = [previous-shortcut, previous-symbol, next-symbol]\n    var where-definitions = Object.create(null)\n    var exprs-data = []\n\n    var new-data = expr -> {\n        expr: expr\n        first-occurrences: []\n        previous: null\n        next: null\n      }\n\n    var get-leftmost = (root) ->\n      while (root.isCall() || root.isMember())\n        root = root.at 0\n      root\n\n    var replace-placeholder = (expr, ph-name, replacement) -> do!\n      expr.for-each-recursive\n        ph -> do!\n          if (ph.placeholder?() && ph.get-simple-value() == ph-name)\n            ph.replace-with replacement\n\n    var has-where-definitions = false\n\n    var handle-where-definition = definition -> do!\n      if (!definition.id == '=') do!\n        definition.error 'Assignment expected'\n        return\n      if (!(definition.at 0).placeholder?())\n        (definition.at 0).error 'Placeholder expected'\n        return\n      var ph-name = (definition.at 0).get-simple-value()\n      if (ph-name == null || ph-name.index-of('#') != 0 || ph-name.index-of('#', 1) > 1)\n        (definition.at 0).error 'Hash identifier expected'\n        return\n      if (special-symbols.index-of ph-name >= 0)\n        (definition.at 0).error <- 'Hash identifier ' + ph-name + ' not allowed in where clause'\n        return\n      has-where-definitions = true\n      where-definitions[ph-name] = definition.at 1\n\n    var handle-where-clause = expr ->\n      if (expr.tuple?() && expr.count > 0) do\n        if (handle-where-clause(expr.at(-1)))\n          expr.pop()\n        false\n      else if (expr.call?() && (expr.at 0).placeholder?() && (expr.at 0).get-simple-value() == '#where') do\n        var clauses = expr.at 1\n        if (clauses.tuple?())\n          clauses.for-each handle-where-definition\n        else\n          handle-where-definition clauses\n        true\n      else false\n\n    var where-clause-declaration = (ph-name, expr) -> do\n      var name = ph-name.substring 1\n      var tag = (expr.newTag name).handle-as-tag-declaration().handle-as-virtual-tag()\n      ` ((~` tag) = ~` expr)\n\n    var where-clause-variable = (ph-name, ph) -> do\n      var name = ph-name.substring 1\n      (ph.newTag name).handle-as-virtual-tag()\n\n    if (handle-where-clause exprs)\n      exprs = exprs.new-tuple()\n\n    var analyze-expr = (expr) -> do!\n      var data = new-data expr\n      data.expr.for-each-recursive\n        ph -> do!\n          if (ph.placeholder?())\n            var ph-value = ph.get-simple-value()\n            if (ph-value == null || ph-value == previous-shortcut || ph-value == previous-symbol)\n              if (data.previous == null)\n                data.previous = ph\n              else\n                ph.error 'More than one previous reference specified'\n            else if (ph-value == next-symbol)\n              if (data.next == null)\n                data.next = ph\n              else\n                ph.error 'More than one next reference specified'\n            else if (where-definitions[ph-value]?)\n              var where-definition = where-definitions[ph-value]\n              if (where-definition != null) do\n                data.first-occurrences.push\n                  where-clause-declaration(ph-value, where-definition)\n                where-definitions[ph-value] = null\n              ph.replace-with\n                where-clause-variable(ph-value, ph)\n      exprs-data.push data\n\n    if (!start.placeholder?())\n      analyze-expr start\n    if (exprs.tuple?())\n      exprs.for-each analyze-expr\n    else\n      analyze-expr exprs\n\n    exprs-data.for-each\n      data -> do!\n        if (data.first-occurrences.length > 0)\n          var expr = data.expr\n          data.expr = ` #no-new-scope do\n            ~` data.first-occurrences\n            ~` expr.newTag '$$dataExpr$$'\n          data.expr.replace-tag('$$dataExpr$$', expr)\n\n    var previous = null\n    var next-reference = null\n    var last = null\n    while (exprs-data.length > 0)\n      var current = exprs-data.shift()\n      if (previous != null && previous.next != null)\n        if (current.previous != null)\n          current.previous.error 'Cannot have a previous reference if the previous expression has a next reference'\n        replace-placeholder(previous.expr, previous.next.get-simple-value(), current.expr)\n        last = previous\n      else\n        if (current.previous != null)\n          if (last != null)\n            replace-placeholder(current.expr, current.previous.get-simple-value(), last.expr)\n          else\n            current.previous.error 'Cannot have a previous reference with no previous expression'\n        else\n          if (previous != null)\n            if (!current.expr.call?())\n              current.expr = `((~`current.expr) ())\n            var leftmost = get-leftmost <- current.expr\n            var leftmost-parent = leftmost.parent\n            leftmost-parent.shift()\n            leftmost-parent.unshift(` (~`last.expr).(~`leftmost))\n        last = current\n      previous = last\n\n    if has-where-definitions\n      last.expr = ` do\n        ~` last.expr\n    last.expr.resolve-virtual()\n    last.expr\n\n)\n\n"]}