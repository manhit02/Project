var should, Meta, mjs, _$0, _$1;
_$0: {
    require('source-map-support').install();
    _$1: {
        should = require('should');
        Meta = require('..');
        mjs = Meta();
    }
    describe('#compilerFromString', function () {
        var _$2, _$3;
        _$3: {
            it('should produce an ast from valid code', function () {
                var compiler, ast, _$4, _$5;
                _$5: {
                    compiler = mjs.compilerFromString('var a = 42');
                    ast = compiler.produceAst();
                    _$4 = ast.type.should.equal('Program');
                    break _$5;
                }
                return _$4;
            });
            it('should report errors for invalid code', function () {
                var compiler, ast, _$4, _$5;
                _$5: {
                    compiler = mjs.compilerFromString('ff');
                    ast = compiler.produceAst();
                    should.not.exist(ast);
                    _$4 = compiler.errors.map(function (e) {
                        return e.message;
                    }).should.eql(['Undeclared identifier "ff"']);
                    break _$5;
                }
                return _$4;
            });
            it('should inherit options set at the meta level', function () {
                var customMjs, compiler, _$4, _$5;
                _$5: {
                    customMjs = Meta();
                    customMjs.options.fullMacroErrors = true;
                    customMjs.options.emitIdentifierStatements = true;
                    compiler = customMjs.compilerFromString('');
                    compiler.options.fullMacroErrors.should.equal(true);
                    _$4 = compiler.options.emitIdentifierStatements.should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            _$2 = describe('options.allowUndeclaredIdentifiers', function () {
                return it('causes the compiler to not emit errors for undeclared identifiers', function () {
                    var customMjs, compiler, ast, javascript, value, _$4, _$5;
                    _$5: {
                        customMjs = Meta();
                        customMjs.options.allowUndeclaredIdentifiers = true;
                        compiler = customMjs.compilerFromString('value = 42');
                        ast = compiler.produceAst();
                        javascript = compiler.generate(ast).code;
                        value = 0;
                        eval(javascript);
                        _$4 = value.should.equal(42);
                        break _$5;
                    }
                    return _$4;
                });
            });
            break _$3;
        }
        return _$2;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9TU0QvbWFzc2kvSEYzL21ldGFzY3JpcHQvdGVzdC9jb21waWxlci1hcGktdGVzdC5tanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImluc3RhbGwiLCJzaG91bGQiLCJNZXRhIiwibWpzIiwiZGVzY3JpYmUiLCJpdCIsImNvbXBpbGVyIiwiY29tcGlsZXJGcm9tU3RyaW5nIiwiYXN0IiwicHJvZHVjZUFzdCIsIl8kNCIsInR5cGUiLCJlcXVhbCIsIm5vdCIsImV4aXN0IiwiZXJyb3JzIiwibWFwIiwiZSIsIm1lc3NhZ2UiLCJlcWwiLCJjdXN0b21NanMiLCJvcHRpb25zIiwiZnVsbE1hY3JvRXJyb3JzIiwidHJ1ZSIsImVtaXRJZGVudGlmaWVyU3RhdGVtZW50cyIsIl8kMiIsImFsbG93VW5kZWNsYXJlZElkZW50aWZpZXJzIiwiamF2YXNjcmlwdCIsImdlbmVyYXRlIiwiY29kZSIsInZhbHVlIiwiZXZhbCJdLCJtYXBwaW5ncyI6IkFBQUEsSSxNQUFBLEUsSUFBQSxFLEdBQUEsRSxHQUFBLEUsR0FBQSxDO0FBQUE7QUFBQSxJQUFBQSxPQUFPLHNCQUFzQixDQUFDQyxPQUFPLEdBQXJDO0FBQUEsSUFJQTtBQUFBLFFBQ0VDLE1BQU8sR0FBRUYsT0FBUSxVQUFWLENBRFQ7QUFBQSxRQUVFRyxJQUFLLEdBQUVILE9BQVEsTUFBVixDQUZQO0FBQUEsUUFHRUksR0FBSSxHQUFFRCxJQUFJLEVBQU4sQ0FITjtBQUFBLEtBSkE7QUFBQSxJQVNBRSxRQUFBLENBQVMscUJBQVQ7QUFBQSxZLEdBQUEsRSxHQUFBO0FBQUEsUUFFRTtBQUFBLFlBQUFDLEVBQUEsQ0FBRyx1Q0FBSDtBQUFBLG9CLFFBQUEsRSxHQUFBLEUsR0FBQSxFLEdBQUE7QUFBQSxnQkFDRTtBQUFBLG9CQUFBQyxRQUFhLEdBQUVILEdBQUcsQ0FBQ0ksa0JBQXFCLGNBQTNCLENBQWI7QUFBQSxvQkFDQUMsR0FBUSxHQUFFRixRQUFRLENBQUNHLFVBQVcsRUFBdEIsQ0FEUjtBQUFBLG9CQUVzQkMsR0FBQSxHQUF0QkYsR0FBRyxDQUFDRyxJQUFJLENBQUNWLE1BQU0sQ0FBQ1csS0FBTSxZQUZ0QjtBQUFBO0FBQUEsaUJBREY7QUFBQSx1QkFDRUYsR0FERjtBQUFBO0FBQUEsWUFLQUwsRUFBQSxDQUFHLHVDQUFIO0FBQUEsb0IsUUFBQSxFLEdBQUEsRSxHQUFBLEUsR0FBQTtBQUFBLGdCQUNFO0FBQUEsb0JBQUFDLFFBQWEsR0FBRUgsR0FBRyxDQUFDSSxrQkFBcUIsTUFBM0IsQ0FBYjtBQUFBLG9CQUNBQyxHQUFRLEdBQUVGLFFBQVEsQ0FBQ0csVUFBVyxFQUF0QixDQURSO0FBQUEsb0JBRUFSLE1BQU0sQ0FBQ1ksR0FBRyxDQUFDQyxLQUFNLENBQUFOLEdBQUEsRUFGakI7QUFBQSxvQkFJRUUsR0FBQSxHQURGSixRQUFRLENBQUNTLE1BQU0sQ0FBQ0MsR0FBRyxXQUFDQyxDQUFEO0FBQUEsK0JBQU1BLENBQUMsQ0FBQ0MsT0FBUjtBQUFBLHNCQUFnQixDQUFDakIsTUFBTSxDQUFDa0IsR0FDekMsaUNBSkY7QUFBQTtBQUFBLGlCQURGO0FBQUEsdUJBQ0VULEdBREY7QUFBQSxlQUxBO0FBQUEsWUFZQUwsRUFBQSxDQUFHLDhDQUFIO0FBQUEsb0IsU0FBQSxFLFFBQUEsRSxHQUFBLEUsR0FBQTtBQUFBLGdCQUNFO0FBQUEsb0JBQUFlLFNBQWUsR0FBRWxCLElBQUksRUFBTixDQUFmO0FBQUEsb0JBQ0FrQixTQUFVLENBQUNDLE9BQU8sQ0FBQ0MsZUFBa0IsR0FBRUMsSUFBRixDQURyQztBQUFBLG9CQUVBSCxTQUFVLENBQUNDLE9BQU8sQ0FBQ0csd0JBQTJCLEdBQUVELElBQUYsQ0FGOUM7QUFBQSxvQkFHQWpCLFFBQWEsR0FBRWMsU0FBVSxDQUFDYixrQkFBcUIsSUFBbEMsQ0FIYjtBQUFBLG9CQUlBRCxRQUFRLENBQUNlLE9BQU8sQ0FBQ0MsZUFBaUIsQ0FBQ3JCLE1BQU0sQ0FBQ1csS0FBTSxDQUFBVyxJQUFBLEVBSmhEO0FBQUEsb0JBS3lEYixHQUFBLEdBQXpESixRQUFRLENBQUNlLE9BQU8sQ0FBQ0csd0JBQTBCLENBQUN2QixNQUFNLENBQUNXLEtBQU0sQ0FBQVcsSUFBQSxFQUx6RDtBQUFBO0FBQUEsaUJBREY7QUFBQSx1QkFDRWIsR0FERjtBQUFBLGVBWkE7QUFBQSxZQW9CQWUsR0FBQSxHQUFBckIsUUFBQSxDQUFTLG9DQUFUO0FBQUEsdUJBRUVDLEVBQUEsQ0FBRyxtRUFBSDtBQUFBLHdCLFNBQUEsRSxRQUFBLEUsR0FBQSxFLFVBQUEsRSxLQUFBLEUsR0FBQSxFLEdBQUE7QUFBQSxvQkFDRTtBQUFBLHdCQUFBZSxTQUFlLEdBQUVsQixJQUFJLEVBQU4sQ0FBZjtBQUFBLHdCQUNBa0IsU0FBVSxDQUFDQyxPQUFPLENBQUNLLDBCQUE2QixHQUFFSCxJQUFGLENBRGhEO0FBQUEsd0JBRUFqQixRQUFhLEdBQUVjLFNBQVUsQ0FBQ2Isa0JBQXFCLGNBQWxDLENBRmI7QUFBQSx3QkFHQUMsR0FBUSxHQUFFRixRQUFRLENBQUNHLFVBQVcsRUFBdEIsQ0FIUjtBQUFBLHdCQUlBa0IsVUFBZSxHQUFFckIsUUFBUSxDQUFDc0IsUUFBUSxDQUFBcEIsR0FBQSxDQUFLLENBQUNxQixJQUF6QixDQUpmO0FBQUEsd0JBTUFDLEtBQVUsR0FBRSxDQUFGLENBTlY7QUFBQSx3QkFPQUMsSUFBZSxDQUFBSixVQUFBLEVBUGY7QUFBQSx3QkFRbUJqQixHQUFBLEdBQW5Cb0IsS0FBSyxDQUFDN0IsTUFBTSxDQUFDVyxLQUFNLEtBUm5CO0FBQUE7QUFBQSxxQkFERjtBQUFBLDJCQUNFRixHQURGO0FBQUEsa0JBRkY7QUFBQSxlQXBCQTtBQUFBO0FBQUEsU0FGRjtBQUFBLGVBRUVlLEdBRkY7QUFBQSxPQVRBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKClcblxuI21ldGFpbXBvcnQgJy4vbGliL3Rlc3RpbmcnXG5cbnZhclxuICBzaG91bGQgPSByZXF1aXJlICdzaG91bGQnXG4gIE1ldGEgPSByZXF1aXJlICcuLidcbiAgbWpzID0gTWV0YSgpXG5cbmRlc2NyaWJlICcjY29tcGlsZXJGcm9tU3RyaW5nJ1xuXG4gIGl0ICdzaG91bGQgcHJvZHVjZSBhbiBhc3QgZnJvbSB2YWxpZCBjb2RlJ1xuICAgIHZhciBjb21waWxlciA9IG1qcy5jb21waWxlci1mcm9tLXN0cmluZyAndmFyIGEgPSA0MidcbiAgICB2YXIgYXN0ID0gY29tcGlsZXIucHJvZHVjZS1hc3QoKVxuICAgIGFzdC50eXBlLnNob3VsZC5lcXVhbCAnUHJvZ3JhbSdcblxuICBpdCAnc2hvdWxkIHJlcG9ydCBlcnJvcnMgZm9yIGludmFsaWQgY29kZSdcbiAgICB2YXIgY29tcGlsZXIgPSBtanMuY29tcGlsZXItZnJvbS1zdHJpbmcgJ2ZmJ1xuICAgIHZhciBhc3QgPSBjb21waWxlci5wcm9kdWNlLWFzdCgpXG4gICAgc2hvdWxkLm5vdC5leGlzdCBhc3RcbiAgICBjb21waWxlci5lcnJvcnMubWFwKGUgLT4gZS5tZXNzYWdlKS5zaG91bGQuZXFsXG4gICAgICBbJ1VuZGVjbGFyZWQgaWRlbnRpZmllciBcImZmXCInXVxuXG4gIGl0ICdzaG91bGQgaW5oZXJpdCBvcHRpb25zIHNldCBhdCB0aGUgbWV0YSBsZXZlbCdcbiAgICB2YXIgY3VzdG9tLW1qcyA9IE1ldGEoKVxuICAgIGN1c3RvbS1tanMub3B0aW9ucy5mdWxsLW1hY3JvLWVycm9ycyA9IHRydWVcbiAgICBjdXN0b20tbWpzLm9wdGlvbnMuZW1pdC1pZGVudGlmaWVyLXN0YXRlbWVudHMgPSB0cnVlXG4gICAgdmFyIGNvbXBpbGVyID0gY3VzdG9tLW1qcy5jb21waWxlci1mcm9tLXN0cmluZyAnJ1xuICAgIGNvbXBpbGVyLm9wdGlvbnMuZnVsbC1tYWNyby1lcnJvcnMuc2hvdWxkLmVxdWFsIHRydWVcbiAgICBjb21waWxlci5vcHRpb25zLmVtaXQtaWRlbnRpZmllci1zdGF0ZW1lbnRzLnNob3VsZC5lcXVhbCB0cnVlXG5cbiAgZGVzY3JpYmUgJ29wdGlvbnMuYWxsb3dVbmRlY2xhcmVkSWRlbnRpZmllcnMnXG5cbiAgICBpdCAnY2F1c2VzIHRoZSBjb21waWxlciB0byBub3QgZW1pdCBlcnJvcnMgZm9yIHVuZGVjbGFyZWQgaWRlbnRpZmllcnMnXG4gICAgICB2YXIgY3VzdG9tLW1qcyA9IE1ldGEoKVxuICAgICAgY3VzdG9tLW1qcy5vcHRpb25zLmFsbG93LXVuZGVjbGFyZWQtaWRlbnRpZmllcnMgPSB0cnVlXG4gICAgICB2YXIgY29tcGlsZXIgPSBjdXN0b20tbWpzLmNvbXBpbGVyLWZyb20tc3RyaW5nICd2YWx1ZSA9IDQyJ1xuICAgICAgdmFyIGFzdCA9IGNvbXBpbGVyLnByb2R1Y2UtYXN0KClcbiAgICAgIHZhciBqYXZhc2NyaXB0ID0gY29tcGlsZXIuZ2VuZXJhdGUoYXN0KS5jb2RlXG5cbiAgICAgIHZhciB2YWx1ZSA9IDBcbiAgICAgICNleHRlcm5hbCBldmFsIGphdmFzY3JpcHRcbiAgICAgIHZhbHVlLnNob3VsZC5lcXVhbCA0MlxuXG4iXX0=